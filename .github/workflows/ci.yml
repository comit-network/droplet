name: CI

on:
  pull_request:
  push:
    branches:
      - 'staging'
      - 'trying'
      - 'master'

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: clippy

      - name: Install dprint
        run: |
          curl -fsSL https://dprint.dev/install.sh | sh
          echo "/home/runner/.dprint/bin" >> $GITHUB_PATH

      - name: Check formatting
        run: dprint check

      - name: Run clippy with default features
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Run clippy with all features
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  ui_e2e_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./e2e_tests
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set up environment and build binaries
        run: |
          ./e2e_test_setup.sh

      - name: Run test
        run: |
          yarn install
          yarn run test

      - name: Extract docker logs
        if: failure()
        run: |
          - docker logs liquid > liquid.log
          - docker logs electrs-liquid > electrs.log
          - docker logs esplora-liquid > esplora.log

      - name: Archive logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Logfiles
          path: |
            ./bobtimus.log
            ./e2e_tests/liquid.log
            ./e2e_tests/electrs.log
            ./e2e_tests/esplora.log

  build_test_workspace:
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-gnu, x86_64-apple-darwin ]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Cache target directory
        uses: actions/cache@v2
        if: matrix.os != 'macos-latest'
        with:
          path: target
          key: ${{ matrix.os }}-target-directory-${{ hashFiles('Cargo.lock') }}-v2

      - name: Cargo test (all workspace)
        if: matrix.os == 'ubuntu-latest'
        run: cargo test --workspace --all-features

      - name: Cargo build
        if: matrix.os == 'macos-latest'
        run: cargo build --workspace --all-features

  swap_wasm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: swap-wasm-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Cargo build
        run: cargo build -p swap --target wasm32-unknown-unknown

  webapp_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache node_modules directory
        uses: actions/cache@v2
        with:
          path: |
            waves/node_modules
          key: node-modules-directory-${{ hashFiles('waves/yarn.lock') }}-v2

      - name: React tests
        run: |
          cd waves
          yarn install
          yarn run build
          yarn run test

  wallet_buildscript_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ matrix.os }}-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Build wallet with default configuration
        run: cargo test -p wallet constants_tests

      - name: Build wallet with custom configuration
        run: cargo test -p wallet constants_tests
        env:
          NATIVE_ASSET_TICKER: FOO-BTC
          NATIVE_ASSET_ID: 2dcf5a8834645654911964ec3602426fd3b9b4017554d3f9c19403e7fc1411d3
          CHAIN: ELEMENTS
          DEFAULT_FEE_PER_VBYTE: 13.37

  wasm_wallet_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Cache target, cargo and wasm-pack directories
        uses: actions/cache@v2
        with:
          path: |
            target
            ~/.cargo/bin
            ~/.cache/.wasm-pack
          key: ubuntu-rust-${{ steps.toolchain.outputs.rustc_hash }}-wasm-wallet-cargo-and-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Install wasm-pack
        run: which wasm-pack || curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Extension wallet tests
        run: |
          cd extension/wallet_lib
          cargo test

      - name: Upload artifact on test failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: wasm-wallet-test-binary
          path: ./target/wasm32-unknown-unknown/debug/deps/wallet-*.wasm
